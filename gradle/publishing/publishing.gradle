import java.nio.file.Files

ext /*-ra properties*/ {
	Properties properties = new Properties()
	properties.load(new FileInputStream(file("gradle/publishing/publishing.properties")))

	properties.forEach ((k, v) -> set(k, v))

	versionEnv = System.getenv("VERSION_NUMBER")

	if (versionEnv != null) {
		version = versionEnv
	}

	version_valid = versionValidForPublishing(version)
	published_version_name = version_valid ? makeName(version, display_name) : "INVALID"
	changelog_text = getChangelog(file(changelog_file))
}

tasks.register("publishMod") {
	if (version_valid) {
		dependsOn(tasks.named("modrinth"))
		dependsOn(tasks.named("curseforge"))
	}
}

static String makeName(String version, String displayName) {
	String projectVersion = "v" + version.split("-build")[0].replace("-", ".")
	String mcVersion = version.split("\\+mc")[1]
	String rawPatch = System.getenv("PATCH_NUMBER")
	String patch = rawPatch === null || rawPatch.isEmpty() || rawPatch == "0" ? "" : "Patch $rawPatch"
	return "$displayName $mcVersion $projectVersion $patch".trim()
}

static boolean versionValidForPublishing(String version) {
	return !version.contains("local")
}

static String getChangelog(File changelogFile) {
	String text = Files.readString(changelogFile.toPath())
	String[] split = text.split("----------")
	if (split.length != 2)
		throw new IllegalStateException("Malformed changelog")
	return split[1].trim()
}

apply from: "gradle/publishing/modrinth.gradle"
apply from: "gradle/publishing/curseforge.gradle"
